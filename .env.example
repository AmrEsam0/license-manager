# License Manager Environment Configuration
# Copy this file to .env and customize for your needs

# =============================================================================
# SECURITY SETTINGS
# =============================================================================

# Master encryption key (REQUIRED for production)
# Generate a secure random key: openssl rand -hex 32
# This key is used to derive all other cryptographic keys
LICENSE_MASTER_KEY=your-secure-random-32-character-key-here

# =============================================================================
# CONFIGS
# =============================================================================

# Default license duration in days (used when no specific days are provided)
# Default: 30
LICENSE_DEFAULT_DAYS=30

# Number of days that represents a "lifetime" license
# Default: 99999
LICENSE_LIFETIME_DAYS=99999

# Periodic license checking interval in minutes
# Default: 60 (check every hour)
LICENSE_PERIODIC_CHECK_MINUTES=60

# =============================================================================
# FILE LOCATION BEHAVIOR
# =============================================================================

# License files are created in the current working directory by default,
# or in the directory specified by the LICENSE_DIR environment variable.
# Set LICENSE_DIR to override the default location for all license files.
# Filename format: <product_name>.license (spaces and special chars become underscores)
# Example: "My Great App" becomes "My_Great_App.license"
# Commands like check/view/revoke automatically find .license files in the specified directory or current directory

# Directory to store and search for license files (optional)
# If not set, uses the current working directory
LICENSE_DIR=



# =============================================================================
# SECURITY NOTES
# =============================================================================
# 1. Never commit the actual .env file to version control
# 2. Use strong, randomly generated keys in production (32+ characters)
# 3. Consider using a secrets management service for the master key
# 4. Rotate keys periodically in production environments
# 5. All cryptographic keys are derived from the master key using PBKDF2
# 6. Each key type uses a unique salt derived from the master key
# 7. Same master key always produces same derived keys (ensures compatibility)
# 8. Different master keys produce completely different derived keys
